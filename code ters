#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <EEPROM.h>
#include <TimeLib.h> // ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö RTC ‡∏Ç‡∏≠‡∏á Blynk

#define BLYNK_PRINT Serial

// ====== WiFi + Blynk Config ======
char auth[] = "L5ecyjAhHycvXIPjy3nUVNvaGXvUBJih";
char ssid[] = "AccBiz_Floor3";
char pass[] = "";

// ====== Sensor Pin & ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ======
#define flowPin 4
float calibrationFactor = 7.5; // ‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå

volatile int pulseCount = 0;
float flowRate, totalLiters, oldTotal;
float waterPricePerUnit = 8.77;
float roomPrice = 2500.0;
float totalBill;

int resetDay = 1; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï

// ====== EEPROM Config ======
#define EEPROM_SIZE 64
#define ADDR_TOTAL 0

// ====== Function ======
void IRAM_ATTR pulseCounter() {
  pulseCount++;
}

void setup() {
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE);

  pinMode(FLOW_SENSOR, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR), pulseCounter, FALLING);

  Blynk.begin(auth, ssid, pass);

  oldTotal = EEPROM.readFloat(ADDR_TOTAL);
  Serial.println("üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: " + String(oldTotal, 2) + " L");
}

void loop() {
  Blynk.run();
  checkResetDay();

  static unsigned long oldTime = 0;
  if (millis() - oldTime > 5000) { // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥
    detachInterrupt(FLOW_SENSOR);
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
    oldTime = millis();
    pulseCount = 0;
    totalLiters += (flowRate / 60) * 5;
    EEPROM.writeFloat(ADDR_TOTAL, totalLiters);
    EEPROM.commit();
    attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR), pulseCounter, FALLING);

    float usage = totalLiters - oldTotal;
    float waterBill = usage * waterPricePerUnit;
    totalBill = waterBill + roomPrice;

    // ==== ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Blynk ====
    Blynk.virtualWrite(V0, oldTotal);      // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤
    Blynk.virtualWrite(V1, totalLiters);   // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
    Blynk.virtualWrite(V2, usage);         // ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    Blynk.virtualWrite(V3, waterBill);     // ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
    Blynk.virtualWrite(V4, totalBill);     // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    Blynk.virtualWrite(V5, String(day()) + "/" + String(month()) + "/" + String(year())); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

    Serial.println("üíß-----------------------------");
    Serial.println("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤: " + String(oldTotal, 2) + " L");
    Serial.println("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà: " + String(totalLiters, 2) + " L");
    Serial.println("‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÑ‡∏õ: " + String(usage, 2) + " L");
    Serial.println("‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥: " + String(waterBill, 2) + " ‡∏ø");
    Serial.println("‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á: " + String(roomPrice, 2) + " ‡∏ø");
    Serial.println("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: " + String(totalBill, 2) + " ‡∏ø");
  }
}

// ====== ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Text Input (V6) ======
BLYNK_WRITE(V6) {
  resetDay = param.asInt();
  Serial.print("üìÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ");
  Serial.println(resetDay);
}

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ======
void checkResetDay() {
  if (day() == resetDay && hour() == 0 && minute() == 0 && second() < 10) {
    oldTotal = totalLiters; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏ß‡πâ
    EEPROM.writeFloat(ADDR_TOTAL, oldTotal);
    EEPROM.commit();
    Serial.println("‚ôªÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + String(resetDay));
    delay(10000);
  }
}
