#Build vPins
// Build vPins (MINI)
return [
  { json: { pin: 'V0',  key: 'startUnit' } },  // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ (m¬≥)
  { json: { pin: 'V1',  key: 'endUnit'   } },  // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà (m¬≥)
  { json: { pin: 'V2',  key: 'usedUnit'   } },// ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
  { json: { pin: 'V4',  key: 'waterTotal'   } }, // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
  { json: { pin: 'V5',  key: 'roomPrice' } },  // ‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á (‡∏ö‡∏≤‡∏ó)
  { json: { pin: 'V12', key: 'roomName'  } },  // ‚òÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á (Text)
];

#Code #1
// index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á $input.itemIndex ‡πÅ‡∏•‡∏∞ $itemIndex)
const idx = ($input?.itemIndex ?? $itemIndex ?? 0);

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å node "Build vPins"
const vpins = $items('Build vPins', 0); // ‚Üê ‡∏ä‡∏∑‡πà‡∏≠ node ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞
const prev  = vpins?.[idx]?.json;

// ‡∏ñ‡πâ‡∏≤‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á error-friendly payload ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏á‡πà‡∏≤‡∏¢
if (!prev) {
  return {
    json: {
      error: `No matching vPin at index ${idx}. Check node name "Build vPins" and connection order.`,
      idx,
      have_vpins: Array.isArray(vpins) ? vpins.length : 0,
      raw_input: $json
    }
  };
}

// ------ ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å HTTP ------
const raw   = $json.body ?? $json;                 // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTTP node ‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÉ‡∏ô body
const arr   = Array.isArray(raw) ? raw : (raw?.result ?? raw?.data);
const first = arr?.[0] ?? raw?.value ?? raw;

// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô NaN
const value = Number(first);
return {
  json: {
    pin:  prev.pin,
    key:  prev.key,
    value: Number.isFinite(value) ? value : 0
  }
};

#Code#2
// Code #2 (mini-flex) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á key/value ‡πÅ‡∏•‡∏∞ pin/body
const rows = $input.all().map(x => x.json);

// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (value > body > val)
const pickVal = r => r?.value ?? r?.body ?? r?.val ?? null;

// ‡πÅ‡∏õ‡∏•‡∏á string ‡∏´‡∏£‡∏∑‡∏≠ '["123.45"]' -> number
const toNum = v => {
  if (v == null) return null;
  if (typeof v === 'string') {
    let s = v.trim();
    if (s.startsWith('[') && s.endsWith(']')) { try { v = JSON.parse(s)[0]; } catch {} }
    v = String(v).replace(/[^0-9.+-Ee]/g,'');
  }
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
};

// ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö: ‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å key ‡πÅ‡∏•‡∏∞ pin
function findBy(names) {
  names = names.map(s => String(s).toLowerCase());
  // ‡∏´‡∏≤ row ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡πà‡∏≠‡∏ô: ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á key/pin (lowercase)
  const r = rows.find(r => {
    const k = String(r.key ?? '').toLowerCase();
    const p = String(r.pin ?? '').toLowerCase();
    return names.includes(k) || names.includes(p);
  });
  return r ? pickVal(r) : null;
}

// ----- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ -----
// v12/roomName ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
const roomNameRaw = findBy(['v12','roomname','room','site_name','name']);
const roomName    = (roomNameRaw == null)
  ? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  : (typeof roomNameRaw === 'string'
      ? (roomNameRaw.startsWith('[') && roomNameRaw.endsWith(']')
          ? (JSON.parse(roomNameRaw)[0] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
          : roomNameRaw)
      : String(roomNameRaw));

// ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
const startUnit   = toNum(findBy(['v0','startunit','start'])) ?? 0;
const endUnit     = toNum(findBy(['v1','endunit','end']))     ?? 0;
let   used        = toNum(findBy(['v2','used','usedunit']));
let   waterTotal  = toNum(findBy(['v4','watertotal']));
const roomPrice   = toNum(findBy(['v5','roomprice'])) ?? 2500;

// ‡πÄ‡∏î‡∏≤/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ pricePerUnit: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ v4 ‡πÅ‡∏•‡∏∞ v2 ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô ENV (default 24)
let pricePerUnit  = toNum(findBy(['priceperunit']));
if (pricePerUnit == null) {
  if (waterTotal != null && used != null && used > 0) pricePerUnit = waterTotal / used;
  else pricePerUnit = Number($env.PRICE_PER_UNIT ?? 24);
}

// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á v2/v4 ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á
if (used == null)        used = Math.max(0, endUnit - startUnit);
if (waterTotal == null)  waterTotal = used * pricePerUnit;

const totalPrice = (waterTotal ?? 0) + (roomPrice ?? 0);

// ----- ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å (‡∏õ‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°) -----
return [{
  json: {
    Timestamp   : new Date().toISOString(),
    Room        : roomName,
    StartUnit   : Number(startUnit.toFixed(3)),
    EndUnit     : Number(endUnit.toFixed(3)),
    UsedUnit    : Number(used.toFixed(3)),
    PricePerUnit: Number(pricePerUnit.toFixed(2)),
    WaterTotal  : Number(waterTotal.toFixed(2)),
    RoomPrice   : Number(roomPrice.toFixed(2)),
    TotalPrice  : Number(totalPrice.toFixed(2)),
  }
}];

#Code#2
const customer = items[0].json;

// -----------------------------
// üïì ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 7 = ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î 7 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•
// -----------------------------
const daysToAdd = 7;

// ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
const now = new Date();
const invoice_date = now.toISOString().split('T')[0]; // ‡πÄ‡∏ä‡πà‡∏ô "2025-10-26"

// ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏° daysToAdd)
const due_date = new Date(now);
due_date.setDate(now.getDate() + daysToAdd);
const invoice_due_date = due_date.toISOString().split('T')[0];

// -----------------------------
// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ Room ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å Node ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
// -----------------------------
const roomName = `‡∏´‡∏≠‡∏û‡∏±‡∏Å room ${customer.Room}`;

return [
  {
    json: {
      name: roomName, // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Room
      StartUnit: customer.StartUnit,       // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤
      EndUnit: customer.EndUnit,           // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
      UsedUnit: customer.UsedUnit,         // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
      WaterTotal: customer.WaterTotal,     // ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
      RoomPrice: customer.RoomPrice,       // ‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
      TotalPrice: customer.TotalPrice,     // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

      InvoiceDate: invoice_date,           // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•
      DueDate: invoice_due_date,           // ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      date: now.toLocaleDateString('th-TH'), // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢

    }
  }
];
