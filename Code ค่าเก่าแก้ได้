/*************  ESP32 + YF-S201 + Blynk Legacy (custom server) + NTP (auto monthly reset)  *************/
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <EEPROM.h>
#include "time.h"   // NTP

#define BLYNK_PRINT Serial

/*************  Blynk / WiFi (Legacy + custom server)  *************/
char auth[]         = "L5ecyjAhHycvXIPjy3nUVNvaGXvUBJih";
char ssid[]         = "Aticha";
char pass[]         = "0807450025";
char blynk_server[] = "iotservices.thddns.net";
int  blynk_port     = 5535;

/*************  NTP (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)  *************/
const char* ntp1 = "th.pool.ntp.org";
const char* ntp2 = "pool.ntp.org";
const char* ntp3 = "time.nist.gov";
const long  gmtOffset_sec      = 7 * 3600; // UTC+7
const int   daylightOffset_sec = 0;

/*************  Sensor (YF-S201)  *************/
#define flowPin 4
volatile int   pulseCount = 0;
float          calibrationFactor = 4.5;   // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà ‚Äú‡∏Ç‡∏∂‡πâ‡∏ô‚Äù (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)

float flowRate     = 0.0;  // L/min
float totalLiters  = 0.0;  // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏∞‡∏™‡∏°)
float oldTotal     = 0.0;  // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ (‡∏£‡∏≠‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)

/*************  Billing params *************/
float pricePerUnit = 24.0;     // ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢
float roomPrice    = 2500.0;   // ‡∏ö‡∏≤‡∏ó  ‚Üê ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô Blynk ‡∏ó‡∏µ‡πà V5

/*************  Reset day  *************/
int  resetDay = 1;   // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö 1‚Äì31

/*************  EEPROM layout  *************/
#define EEPROM_SIZE      64
#define ADDR_TOTAL        0   // float totalLiters
#define ADDR_OLD          8   // float oldTotal
#define ADDR_LAST_MONTH  16   // int8_t lastResetMonth (0..11), -1 = never

/*************  State  *************/
int8_t lastResetMonth = -1;

/*************  Blynk  *************/
BlynkTimer timer;

/* ==================== Interrupt ==================== */
void IRAM_ATTR pulseCounter() { pulseCount++; }

/* ==================== EEPROM helpers ==================== */
void loadEEPROM() {
  EEPROM.get(ADDR_TOTAL, totalLiters);
  EEPROM.get(ADDR_OLD,   oldTotal);
  EEPROM.get(ADDR_LAST_MONTH, lastResetMonth);

  if (!isfinite(totalLiters) || totalLiters < 0) totalLiters = 0;
  if (!isfinite(oldTotal)    || oldTotal    < 0) oldTotal    = totalLiters;
  if (lastResetMonth < -1 || lastResetMonth > 11) lastResetMonth = -1;

  Serial.println("üíæ totalLiters=" + String(totalLiters,3));
  Serial.println("üíæ oldTotal   =" + String(oldTotal,3));
  Serial.println("üíæ lastMonth  =" + String(lastResetMonth));
}
inline void saveTotal()       { EEPROM.put(ADDR_TOTAL, totalLiters); EEPROM.commit(); }
inline void saveOld()         { EEPROM.put(ADDR_OLD,   oldTotal);    EEPROM.commit(); }
inline void saveLastMonth()   { EEPROM.put(ADDR_LAST_MONTH, lastResetMonth); EEPROM.commit(); }

/* ==================== Blynk events ==================== */
BLYNK_CONNECTED() {
  Serial.println("‚úÖ Blynk connected (legacy custom server)");
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Text Input V6 (clamp 1‚Äì31) */
BLYNK_WRITE(V6) {
  int d = param.asInt();
  if (d < 1) d = 1;
  if (d > 31) d = 31;
  resetDay = d;
  Serial.println("üìÖ Reset day = " + String(resetDay));
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Text Input V9 */
// ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Text Input V9 (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
// ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Text Input V9 (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
BLYNK_WRITE(V9) {
  float v = param.asFloat();
  oldTotal = (v < 0) ? 0 : v;   // ‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
  saveOld();

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  Blynk.virtualWrite(V0, oldTotal);        // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤
  Blynk.virtualWrite(V1, totalLiters);     // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ/‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:
  // computeAndPush();  // <-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
  Serial.println("‚úèÔ∏è Set oldTotal manually = " + String(oldTotal, 2));
}



/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Button V10, Momentary) */
BLYNK_WRITE(V10) {
  if (param.asInt() == 1) {
    oldTotal = totalLiters;
    saveOld();
    struct tm t; 
    if (getLocalTime(&t)) { lastResetMonth = t.tm_mon; saveLastMonth(); }
    Serial.println("üîò Manual reset ‚Üí oldTotal = " + String(oldTotal,2));
  }
}

/* ==================== Utilities (NTP time) ==================== */
bool getNow(struct tm &t) { return getLocalTime(&t); }

void pushDateToBlynk() {
  struct tm t;
  if (getNow(t)) {
    char buf[16];
    strftime(buf, sizeof(buf), "%d/%m/%Y", &t);
    Blynk.virtualWrite(V8, buf);
  } else {
    Blynk.virtualWrite(V8, "sync...");
  }
}

/* ==================== Auto monthly reset (safe) ==================== */
void checkResetDay() {
  struct tm t;
  if (!getNow(t)) return;

  if (t.tm_mday == resetDay && t.tm_hour == 0 && t.tm_min == 0 && t.tm_sec < 10) {
    if (lastResetMonth != t.tm_mon) {       // ‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      oldTotal = totalLiters;               // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‚Üí ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      saveOld();
      lastResetMonth = t.tm_mon;
      saveLastMonth();
      Serial.println("‚ôªÔ∏è Auto reset ‚Üí oldTotal = " + String(oldTotal,2) + " (month=" + String(lastResetMonth+1) + ")");
      delay(10000);
    }
  }
}

/* ==================== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ (‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ==================== */
void computeAndPush() {
  static unsigned long lastMs = millis();

  detachInterrupt(digitalPinToInterrupt(flowPin));
  unsigned long now = millis();
  unsigned long dt  = now - lastMs; if (dt == 0) dt = 1;

  float pulsesPerSec = (pulseCount * 1000.0) / (float)dt;
  flowRate = pulsesPerSec / calibrationFactor;   // L/min
  pulseCount = 0;
  lastMs = now;
  attachInterrupt(digitalPinToInterrupt(flowPin), pulseCounter, RISING);

  totalLiters += (flowRate / 60.0);  // + ‡∏•‡∏¥‡∏ï‡∏£/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  saveTotal();

  float startUnit  = oldTotal;
  float endUnit    = totalLiters;
  float usedUnit   = endUnit - startUnit;
  if (usedUnit < 0) usedUnit = 0;
  float waterTotal = usedUnit * pricePerUnit; // (‡πÉ‡∏´‡∏°‡πà ‚àí ‡πÄ‡∏Å‡πà‡∏≤) √ó 24
float totalPrice = waterTotal + roomPrice;  // ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ + ‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á

// === ‡∏™‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô Blynk ===
Blynk.virtualWrite(V0, startUnit);   // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ = oldTotal
Blynk.virtualWrite(V1, endUnit);     // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà = totalLiters
Blynk.virtualWrite(V2, usedUnit);    // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
Blynk.virtualWrite(V4, waterTotal);  // ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥
Blynk.virtualWrite(V5, roomPrice);   // ‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
Blynk.virtualWrite(V7, totalPrice);  // ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  // Debug Serial
  Serial.print("üíß Rate:");
  Serial.print(flowRate,2);
  Serial.print(" L/min | old:");
  Serial.print(startUnit,2);
  Serial.print(" new:");
  Serial.print(endUnit,2);
  Serial.print(" used:");
  Serial.print(usedUnit,2);
  Serial.print(" | water=");
  Serial.print(usedUnit,2);
  Serial.print(" √ó ");
  Serial.print(pricePerUnit,2);
  Serial.print(" = ");
  Serial.print(waterTotal,2);
  Serial.print(" ‡∏ø | room=");
  Serial.print(roomPrice,2);
  Serial.println(" ‡∏ø");
}

/* ==================== Setup / Loop ==================== */
void setup() {
  Serial.begin(115200);
  delay(300);

  // WiFi
  WiFi.begin(ssid, pass);
  Serial.print("WiFi connecting");
  while (WiFi.status() != WL_CONNECTED) { delay(400); Serial.print("."); }
  Serial.println("\n‚úÖ WiFi connected, IP: " + WiFi.localIP().toString());

  // NTP (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
  configTime(gmtOffset_sec, daylightOffset_sec, ntp1, ntp2, ntp3);

  // Blynk (legacy custom server)
  Blynk.config(auth, blynk_server, blynk_port);
  Blynk.connect();

  // EEPROM
  EEPROM.begin(EEPROM_SIZE);
  loadEEPROM();

  // Sensor
  pinMode(flowPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(flowPin), pulseCounter, RISING);

  // Schedules
  timer.setInterval(1000, computeAndPush); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì/‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
  timer.setInterval(1000, checkResetDay);  // ‡πÄ‡∏ä‡πá‡∏Å‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
  timer.setInterval(5000, pushDateToBlynk);// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà V8 ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.run();
    if (!Blynk.connected()) Blynk.connect();
  }
  timer.run();
}
