/*************  ESP32 + YF-S201 + Blynk Legacy (custom server) + NTP (auto monthly reset) *************/
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <EEPROM.h>
#include "time.h"   // NTP

#define BLYNK_PRINT Serial

/*************  Blynk / WiFi (Legacy + custom server)  *************/
char auth[]         = "HU4tksvBuZJJfXuSU_7sOlHq1KpHQ_DC";
char ssid[]         = "Aticha";
char pass[]         = "0807450025";
char blynk_server[] = "iotservices.thddns.net";
int  blynk_port     = 5535;

/*************  NTP (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)  *************/
const char* ntp1 = "th.pool.ntp.org";
const char* ntp2 = "pool.ntp.org";
const char* ntp3 = "time.nist.gov";
const long  gmtOffset_sec      = 7 * 3600; // UTC+7
const int   daylightOffset_sec = 0;

/*************  Sensor (YF-S201)  *************/
#define flowPin 4
volatile int   pulseCount = 0;
float          calibrationFactor = 7.5;   // (YF-S201 ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ~7.5)

float flowRate     = 0.0;  // m¬≥/min (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•)
float totalLiters  = 0.0;  // L (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏∞‡∏™‡∏°)
float oldTotal     = 0.0;  // L (‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)

/*************  Billing params  *************/
float pricePerUnit = 24.0;     // ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢
float roomPrice    = 2500.0;   // ‡∏ö‡∏≤‡∏ó
String roomNumber  = "Room 101";

/*************  Reset params (Day + Time)  *************/
int  resetDay = 1;       // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏£‡∏≠‡∏ö
int  resetHour = 0;      // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
int  resetMinute = 0;    // ‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï

/*************  EEPROM layout  *************/
#define EEPROM_SIZE      64
#define ADDR_TOTAL        0   // float totalLiters
#define ADDR_OLD          8   // float oldTotal
#define ADDR_LAST_MONTH  16   // int8_t lastResetMonth

/*************  State  *************/
int8_t lastResetMonth = -1;

/*************  Blynk Timer  *************/
BlynkTimer timer;

/* ==================== Interrupt ==================== */
void IRAM_ATTR pulseCounter() { pulseCount++; }

/* ==================== EEPROM helpers ==================== */
void loadEEPROM() {
  EEPROM.get(ADDR_TOTAL, totalLiters);
  EEPROM.get(ADDR_OLD,   oldTotal);
  EEPROM.get(ADDR_LAST_MONTH, lastResetMonth);

  if (!isfinite(totalLiters) || totalLiters < 0) totalLiters = 0;
  if (!isfinite(oldTotal)    || oldTotal    < 0) oldTotal    = totalLiters;
  if (lastResetMonth < -1 || lastResetMonth > 11) lastResetMonth = -1;

  Serial.println("üíæ totalLiters=" + String(totalLiters,3));
  Serial.println("üíæ oldTotal   =" + String(oldTotal,3));
  Serial.println("üíæ lastMonth  =" + String(lastResetMonth));
}
inline void saveTotal()       { EEPROM.put(ADDR_TOTAL, totalLiters); EEPROM.commit(); }
inline void saveOld()         { EEPROM.put(ADDR_OLD,   oldTotal);    EEPROM.commit(); }
inline void saveLastMonth()   { EEPROM.put(ADDR_LAST_MONTH, lastResetMonth); EEPROM.commit(); }

/* ==================== Blynk Connected ==================== */
BLYNK_CONNECTED() {
  Serial.println("‚úÖ Blynk connected");
  Blynk.virtualWrite(V12, roomNumber);
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á (Text Input V12) */
BLYNK_WRITE(V12) {
  roomNumber = param.asStr();
  Serial.println("üè† Room set to: " + roomNumber);
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (Text Input V6) */
BLYNK_WRITE(V6) {
  int d = param.asInt();
  if (d < 1) d = 1;
  if (d > 31) d = 31;
  resetDay = d;
  Serial.println("üìÖ Reset Day = " + String(resetDay));
}

/* ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (Time Input V13) */
BLYNK_WRITE(V13) {
  TimeInputParam t(param);
  resetHour   = t.getStartHour();
  resetMinute = t.getStartMinute();
  Serial.println("‚è∞ Reset Time = " + String(resetHour) + ":" + String(resetMinute));
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (V9) */
BLYNK_WRITE(V9) {
  String raw = param.asStr();
  if (raw.length() == 0) return;
  float v = raw.toFloat();
  if (!isfinite(v) || v < 0) v = 0;
  oldTotal = v * 1000.0; // m¬≥ ‚Üí L
  saveOld();
  Blynk.virtualWrite(V0, v);
  Serial.println("‚úÖ Set oldTotal = " + String(v,3) + " m¬≥");
}

/* ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (V11) */
BLYNK_WRITE(V11) {
  String raw = param.asStr();
  if (raw.length() == 0) return;
  float v = raw.toFloat();
  if (!isfinite(v) || v < 0) v = 0;
  totalLiters = v * 1000.0; // m¬≥ ‚Üí L
  saveTotal();
  Serial.println("‚úÖ Set totalLiters = " + String(v,3) + " m¬≥");
}

/* ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏≠‡∏á (V10) */
BLYNK_WRITE(V10) {
  if (param.asInt() == 1) {
    oldTotal = totalLiters;
    saveOld();
    struct tm t; 
    if (getLocalTime(&t)) { lastResetMonth = t.tm_mon; saveLastMonth(); }
    Serial.println("üîò Manual reset ‚Üí oldTotal = " + String(oldTotal / 1000.0,3) + " m¬≥");
    Blynk.virtualWrite(V0, oldTotal / 1000.0);
  }
}

/* ==================== ‡πÄ‡∏ß‡∏•‡∏≤ (NTP) ==================== */
bool getNow(struct tm &t) { return getLocalTime(&t); }

void pushDateToBlynk() {
  struct tm t;
  if (getNow(t)) {
    char buf[16];
    strftime(buf, sizeof(buf), "%d/%m/%Y", &t);
    Blynk.virtualWrite(V8, buf);
  } else {
    Blynk.virtualWrite(V8, "sync...");
  }
}

/* ==================== ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡∏±‡∏ô + ‡πÄ‡∏ß‡∏•‡∏≤) ==================== */
void checkResetDay() {
  struct tm t;
  if (!getNow(t)) return;

  static bool resetDone = false;
  if (t.tm_mday == resetDay && t.tm_hour == resetHour && t.tm_min == resetMinute) {
    if (!resetDone) {
      oldTotal = totalLiters;
      saveOld();

      lastResetMonth = t.tm_mon;
      saveLastMonth();

      float old_m3 = oldTotal / 1000.0;
      Blynk.virtualWrite(V0, old_m3);

      Serial.println("‚ôªÔ∏è Auto reset ‚Üí oldTotal = " + String(old_m3,3) + " m¬≥");
      resetDone = true;
    }
  } else {
    resetDone = false;
  }
}

/* ==================== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ - m¬≥ ==================== */
void computeAndPush() {
  static unsigned long lastMs = millis();

  detachInterrupt(digitalPinToInterrupt(flowPin));
  unsigned long now = millis();
  unsigned long dt  = now - lastMs; if (dt == 0) dt = 1;

  float pulsesPerSec = (pulseCount * 1000.0) / (float)dt;
  flowRate = (pulsesPerSec / calibrationFactor) / 1000.0; // m¬≥/min
  pulseCount = 0;
  lastMs = now;
  attachInterrupt(digitalPinToInterrupt(flowPin), pulseCounter, FALLING);

  totalLiters += (flowRate / 60.0) * ((float)dt / 1000.0); // L ‚Üí ‡∏™‡∏∞‡∏™‡∏°
  saveTotal();

  float old_m3    = oldTotal / 1000.0;
  float total_m3  = totalLiters / 1000.0;
  float used_m3   = max(0.0f, total_m3 - old_m3);
  float waterTotal = used_m3 * pricePerUnit;
  float totalPrice = waterTotal + roomPrice;

  Blynk.virtualWrite(V0, old_m3);
  Blynk.virtualWrite(V1, total_m3);
  Blynk.virtualWrite(V2, used_m3);
  Blynk.virtualWrite(V3, flowRate);
  Blynk.virtualWrite(V4, waterTotal);
  Blynk.virtualWrite(V5, roomPrice);
  Blynk.virtualWrite(V7, totalPrice);

  Serial.print("üíß ");
  Serial.printf("[%s] Rate:%.6f m¬≥/min | old:%.3f new:%.3f used:%.3f | total=%.2f‡∏ø\n",
                roomNumber.c_str(), flowRate, old_m3, total_m3, used_m3, totalPrice);
}

/* ==================== Setup / Loop ==================== */
void setup() {
  Serial.begin(115200);
  delay(300);

  WiFi.begin(ssid, pass);
  Serial.print("WiFi connecting");
  while (WiFi.status() != WL_CONNECTED) { delay(400); Serial.print("."); }
  Serial.println("\n‚úÖ WiFi connected, IP: " + WiFi.localIP().toString());

  configTime(gmtOffset_sec, daylightOffset_sec, ntp1, ntp2, ntp3);

  Blynk.config(auth, blynk_server, blynk_port);
  Blynk.connect();

  EEPROM.begin(EEPROM_SIZE);
  loadEEPROM();

  pinMode(flowPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(flowPin), pulseCounter, FALLING);

  timer.setInterval(1000, computeAndPush);
  timer.setInterval(1000, checkResetDay);
  timer.setInterval(5000, pushDateToBlynk);
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    Blynk.run();
    if (!Blynk.connected()) Blynk.connect();
  }
  timer.run();
}
